using System.Net;
using System.Text.Json;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Http;
using NLog;

namespace SKP_IntranetSideAPI.Log
{
    public class NLogging : ILog
        {
            private static readonly ILogger logger = LogManager.GetCurrentClassLogger();

            public NLogging()
            {
            }
            public void Information(string message) =>
                logger.Info(message);
            public void Warning(string message) =>
                logger.Warn(message);
            public void Debug(string message) =>
                logger.Debug(message);
            public void Error(string message) =>
                logger.Error(message);
        }
        public interface ILog
        {
            void Information(string message);
            void Warning(string message);
            void Debug(string message);
            void Error(string message);
        }
        public class ErrorDetails
        {
            public int StatusCode { get; set; }
            public string Message { get; set; }
            public override string ToString()
            {
                {
                    return JsonSerializer.Serialize(this);
                }
            }
        }
    public static class ExceptionMiddlewareExtension
    {
        public static void ConfigureExceptionHandler(this IApplicationBuilder app, ILog logger)
        {
            app.UseExceptionHandler(appError =>
            {
                appError.Run(async context =>
                {
                    context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
                    context.Response.ContentType = "application/json";
                    var contextFeature = context.Features.Get<IExceptionHandlerFeature>();
                    if (contextFeature != null)
                    {
                        logger.Error($"Error Detected! {contextFeature.Error}");
                        await context.Response.WriteAsync(new ErrorDetails()
                        {
                            StatusCode = context.Response.StatusCode,
                            Message = "Internal Server Error generated by NLog"
                        }.ToString());
                    }

                });
            });
        }
    }
}
